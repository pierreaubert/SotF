name: Build and Release

on:
  push:
    branches: [main, master]
    tags: ["v*"]
  pull_request:
    branches: [main, master]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-tauri:
    name: Build Tauri App ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
            os: macos-latest
            name: autoeq-app-macos-intel
          - target: aarch64-apple-darwin
            os: macos-latest
            name: autoeq-app-macos-arm64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: autoeq-app-linux-x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: autoeq-app-windows-x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-tauri-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build Tauri App
        run: npm run tauri build -- --target ${{ matrix.target }}

      - name: Upload Tauri artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/
          if-no-files-found: ignore

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-tauri]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            **/*.dmg
            **/*.deb
            **/*.AppImage
            **/*.msi
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
