/**
 * IndexedDB storage for audio sweep measurements
 * Stores sweep results in browser's local database for recall
 */

export interface SweepRecord {
  id?: number; // Auto-generated by IndexedDB
  timestamp: Date;
  deviceName: string;
  signalType: 'sweep' | 'white' | 'pink';
  duration: number;
  sampleRate: number;
  outputChannel: string;
  frequencies: number[];
  magnitudes: number[];
  phases: number[];
  // Optional routing info
  inputRouting?: number[];
  outputRouting?: number[];
}

const DB_NAME = 'AutoEQ_Sweeps';
const DB_VERSION = 1;
const STORE_NAME = 'sweeps';

export class SweepDatabase {
  private db: IDBDatabase | null = null;

  /**
   * Initialize the database connection
   */
  async init(): Promise<void> {
    return new Promise((resolve, reject) => {
      const request = indexedDB.open(DB_NAME, DB_VERSION);

      request.onerror = () => {
        console.error('Failed to open database:', request.error);
        reject(request.error);
      };

      request.onsuccess = () => {
        this.db = request.result;
        console.log('Sweep database opened successfully');
        resolve();
      };

      request.onupgradeneeded = (event) => {
        const db = (event.target as IDBOpenDBRequest).result;
        
        // Create object store if it doesn't exist
        if (!db.objectStoreNames.contains(STORE_NAME)) {
          const objectStore = db.createObjectStore(STORE_NAME, { 
            keyPath: 'id', 
            autoIncrement: true 
          });
          
          // Create indexes for efficient querying
          objectStore.createIndex('timestamp', 'timestamp', { unique: false });
          objectStore.createIndex('deviceName', 'deviceName', { unique: false });
          objectStore.createIndex('signalType', 'signalType', { unique: false });
          
          console.log('Sweep database store created');
        }
      };
    });
  }

  /**
   * Save a sweep record to the database
   */
  async saveSweep(record: Omit<SweepRecord, 'id'>): Promise<number> {
    if (!this.db) {
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readwrite');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.add(record);

      request.onsuccess = () => {
        const id = request.result as number;
        console.log('Sweep saved with ID:', id);
        resolve(id);
      };

      request.onerror = () => {
        console.error('Failed to save sweep:', request.error);
        reject(request.error);
      };
    });
  }

  /**
   * Get all sweep records, sorted by timestamp (newest first)
   */
  async getAllSweeps(): Promise<SweepRecord[]> {
    if (!this.db) {
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readonly');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.getAll();

      request.onsuccess = () => {
        const sweeps = request.result as SweepRecord[];
        // Sort by timestamp, newest first
        sweeps.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
        resolve(sweeps);
      };

      request.onerror = () => {
        console.error('Failed to get sweeps:', request.error);
        reject(request.error);
      };
    });
  }

  /**
   * Get a specific sweep by ID
   */
  async getSweep(id: number): Promise<SweepRecord | null> {
    if (!this.db) {
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readonly');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.get(id);

      request.onsuccess = () => {
        resolve(request.result || null);
      };

      request.onerror = () => {
        console.error('Failed to get sweep:', request.error);
        reject(request.error);
      };
    });
  }

  /**
   * Delete a sweep by ID
   */
  async deleteSweep(id: number): Promise<void> {
    if (!this.db) {
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readwrite');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.delete(id);

      request.onsuccess = () => {
        console.log('Sweep deleted:', id);
        resolve();
      };

      request.onerror = () => {
        console.error('Failed to delete sweep:', request.error);
        reject(request.error);
      };
    });
  }

  /**
   * Delete all sweeps (clear database)
   */
  async clearAll(): Promise<void> {
    if (!this.db) {
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readwrite');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.clear();

      request.onsuccess = () => {
        console.log('All sweeps cleared');
        resolve();
      };

      request.onerror = () => {
        console.error('Failed to clear sweeps:', request.error);
        reject(request.error);
      };
    });
  }

  /**
   * Get sweeps filtered by device name
   */
  async getSweepsByDevice(deviceName: string): Promise<SweepRecord[]> {
    if (!this.db) {
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readonly');
      const store = transaction.objectStore(STORE_NAME);
      const index = store.index('deviceName');
      const request = index.getAll(deviceName);

      request.onsuccess = () => {
        const sweeps = request.result as SweepRecord[];
        sweeps.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
        resolve(sweeps);
      };

      request.onerror = () => {
        console.error('Failed to get sweeps by device:', request.error);
        reject(request.error);
      };
    });
  }

  /**
   * Get count of stored sweeps
   */
  async getCount(): Promise<number> {
    if (!this.db) {
      await this.init();
    }

    return new Promise((resolve, reject) => {
      const transaction = this.db!.transaction([STORE_NAME], 'readonly');
      const store = transaction.objectStore(STORE_NAME);
      const request = store.count();

      request.onsuccess = () => {
        resolve(request.result);
      };

      request.onerror = () => {
        console.error('Failed to get sweep count:', request.error);
        reject(request.error);
      };
    });
  }

  /**
   * Close the database connection
   */
  close(): void {
    if (this.db) {
      this.db.close();
      this.db = null;
      console.log('Sweep database closed');
    }
  }
}
