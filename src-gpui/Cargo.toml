[workspace]
members = ["."]
resolver = "2"

[workspace.package]
version = "0.1.1"
edition = "2021"
authors = ["pierre@spinorama.org"]

[workspace.dependencies]
# Math
ndarray = { version = "0.16.0", features = ["blas", "serde"] }

# AutoEQ library
autoeq = { version = "0.2" }

# Async runtime
tokio = { version = "1", features = ["full"] }
futures-util = "0.3"

# Serialization
serde = { version = "1", features = ["derive"] }
serde_json = "1"
serde_yaml = "0.9"

# Audio
cpal = "0.16.0"

# HTTP client
reqwest = { version = "0.12", features = ["json"] }

# Plotting
plotly = { version = "0.13" }

# File handling
tempfile = "3.8"

[package]
name = "autoeq-gpui"
version.workspace = true
edition.workspace = true
authors.workspace = true
description = "AutoEQ GPUI Frontend - Native Rust GUI for speaker and headphone equalization"

[dependencies]
# GPUI framework - use latest compatible versions
gpui = "0.2"
gpui-component = "0.2"

# Core AutoEQ library (no Tauri dependency)
autoeq = { workspace = true }

# Backend library
autoeq_backend = { path = "../src-backend" }

# Math and data processing
ndarray = { workspace = true }

# Async runtime
tokio = { workspace = true }
futures-util = { workspace = true }

# Serialization
serde = { workspace = true }
serde_json = { workspace = true }
serde_yaml = { workspace = true }

# Audio processing
cpal = { workspace = true }

# HTTP client for API calls
reqwest = { workspace = true }

# Plotting (for data visualization)
plotly = { workspace = true }

# File handling
tempfile = { workspace = true }
rfd = "0.15"
csv = "1.3"

# Logging
log = "0.4"
env_logger = "0.11"

# Error handling
anyhow = "1.0"
thiserror = "2.0"

# Time handling
chrono = "0.4"

# URL handling
open = "5.0"

[dev-dependencies]
# Testing
mockito = "1.2"
proptest = "1.4"
criterion = "0.5"

[lib]
name = "SotF"
path = "src/lib.rs"

[[bin]]
name = "SotF"
path = "src/main.rs"

[features]
default = ["audio-capture", "spectrum-analyzer"]
audio-capture = []
spectrum-analyzer = []
mock-backend = []
